{"ast":null,"code":"var _jsxFileName = \"D:\\\\ebooks-react-booksy\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport UserContext from './UserContext';\nimport { Switch, Redirect } from 'react-router-dom';\nimport styles from './Register.module.css';\nconst errorMessages = {\n  'username': 'Please choose a username',\n  'password': 'Please choose a password',\n  'retype-password': 'Please retype password',\n  'different-passwords': 'You must enter the same password twice',\n  'no-numbers': 'Your username connot contain special characters',\n  'email': 'This email is already in use. Login or try a different email adress'\n};\n\nfunction Register() {\n  const [formData, setFormData] = useState({\n    'username': '',\n    'email': '',\n    'password': '',\n    'retype-password': ''\n  });\n  const [formError, setFormError] = useState({\n    'username': '',\n    'email': '',\n    'password': '',\n    'retype-password': '',\n    'different-passwords': ''\n  });\n  const [globalErrorMessage, setGlobalError] = useState('');\n  const [isSuccessfull, setSuccessfull] = useState(false);\n  const [isFilled, setFilled] = useState(false);\n  const {\n    setUser\n  } = useContext(UserContext);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setGlobalError('');\n    const isInvalid = validateData() || (await checkUser());\n\n    if (!isInvalid) {\n      setFilled(false);\n      let res;\n\n      try {\n        // res = await axios.post('http://localhost:3001/users', formData);\n        res = await axios.post('/users', formData);\n        console.log(res);\n        setUser(res.data);\n        localStorage.setItem('user', JSON.stringify(res.data));\n        setSuccessfull(true);\n      } catch (e) {\n        console.log(e.res.data.message, res);\n      }\n    }\n  }\n\n  async function checkUser(e) {\n    const user = await axios.get('/users?username=' + formData.username).then(res => res.data);\n\n    if (user.length) {\n      setGlobalError(\"User already exists\");\n      return true;\n    }\n\n    return false;\n  }\n\n  function validateData() {\n    const inputs = ['username', 'email', 'password', 'retype-password'];\n    const newError = { ...formError\n    };\n    let isInvalid = false;\n\n    for (const input of inputs) {\n      if (!formData[input]) {\n        newError[input] = errorMessages[input];\n        isInvalid = true;\n      }\n    }\n\n    if (!/^[a-zA-Z0-9]+$/i.test(formData.username)) {\n      newError.username = errorMessages['no-numbers'];\n      isInvalid = true;\n    }\n\n    if (formData.password !== formData['retype-password']) {\n      newError['different-passwords'] = errorMessages['different-passwords'];\n      isInvalid = true;\n    }\n\n    setFormError(newError);\n    return isInvalid;\n  }\n\n  function handleInputChange(e) {\n    setFilled(true);\n    setFormData({ ...formData,\n      [e.currentTarget.id]: e.currentTarget.value\n    });\n    const newError = { ...formError,\n      [e.currentTarget.id]: ''\n    };\n\n    if (e.currentTarget.id === 'password' || e.currentTarget.id === 'retype-password') {\n      newError['different-passwords'] = '';\n    }\n\n    setFormError(newError);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.formBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Creare cont\"), globalErrorMessage ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, globalErrorMessage) : null, isSuccessfull ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-success\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, \"Contul tau a fost creat cu succes!\"), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Redirect, {\n    from: \"/register\",\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }))) : null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInputChange,\n    value: formData.username,\n    type: \"text\",\n    className: 'form-control' + (formError.username ? ' is-invalid' : ''),\n    id: \"username\",\n    placeholder: \"Enter username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }, formError.username)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInputChange,\n    value: formData.email,\n    type: \"text\",\n    className: 'form-control' + (formError.email ? ' is-invalid' : ''),\n    id: \"email\",\n    placeholder: \"email@example.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 25\n    }\n  }, formError.email)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInputChange,\n    value: formData.password,\n    type: \"password\",\n    className: 'form-control' + (formError.password ? ' is-invalid' : ''),\n    id: \"password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, formError.password)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"retype-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInputChange,\n    value: formData['retype-password'],\n    type: \"password\",\n    className: 'form-control' + (formError['retype-password'] || formError['different-passwords'] ? ' is-invalid' : ''),\n    id: \"retype-password\",\n    placeholder: \"Retype Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }\n  }, formError['retype-password'], formError['retype-password'] ? /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 62\n    }\n  }) : '', formError['different-passwords'])), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: styles.button,\n    disabled: !isFilled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }\n  }, \"Register\"))));\n}\n\nexport default Register;","map":{"version":3,"sources":["D:/ebooks-react-booksy/src/components/auth/Register.js"],"names":["React","useState","useContext","axios","UserContext","Switch","Redirect","styles","errorMessages","Register","formData","setFormData","formError","setFormError","globalErrorMessage","setGlobalError","isSuccessfull","setSuccessfull","isFilled","setFilled","setUser","handleSubmit","e","preventDefault","isInvalid","validateData","checkUser","res","post","console","log","data","localStorage","setItem","JSON","stringify","message","user","get","username","then","length","inputs","newError","input","test","password","handleInputChange","currentTarget","id","value","formBody","email","button"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport UserContext from './UserContext';\r\nimport { Switch, Redirect } from 'react-router-dom';\r\n\r\nimport styles from './Register.module.css';\r\n\r\n\r\nconst errorMessages = {\r\n    'username':'Please choose a username',\r\n    'password':'Please choose a password',\r\n    'retype-password':'Please retype password',\r\n    'different-passwords': 'You must enter the same password twice',\r\n    'no-numbers': 'Your username connot contain special characters',\r\n    'email':'This email is already in use. Login or try a different email adress',\r\n};\r\n\r\nfunction Register() {\r\n    const [formData, setFormData] = useState({\r\n        'username':'',\r\n        'email':'',\r\n        'password':'',\r\n        'retype-password':''\r\n    });\r\n\r\n    const [formError, setFormError] = useState({\r\n        'username':'',\r\n        'email':'',\r\n        'password':'',\r\n        'retype-password':'',\r\n        'different-passwords':''\r\n    });\r\n\r\n    const [globalErrorMessage, setGlobalError] = useState('');\r\n    const[isSuccessfull, setSuccessfull] = useState(false);\r\n    const[isFilled, setFilled] = useState(false);\r\n    const { setUser } = useContext(UserContext);\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault(); \r\n\r\n        setGlobalError('');\r\n        \r\n        const isInvalid = validateData() || await checkUser();\r\n\r\n        if(!isInvalid) {\r\n            setFilled(false);\r\n            let res;\r\n            try {\r\n            // res = await axios.post('http://localhost:3001/users', formData);\r\n            res = await axios.post('/users', formData);\r\n                console.log(res);\r\n                setUser(res.data);\r\n                localStorage.setItem('user', JSON.stringify(res.data));\r\n                setSuccessfull(true);\r\n            } catch(e) {\r\n                console.log(e.res.data.message, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function checkUser(e) {\r\n        const user = await axios.get('/users?username=' + formData.username)\r\n                                .then(res => res.data)\r\n        if(user.length) {\r\n            setGlobalError(\"User already exists\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function validateData() {\r\n        const inputs = ['username', 'email', 'password', 'retype-password'];\r\n        const newError = { ...formError };\r\n        let isInvalid = false;\r\n\r\n        for(const input of inputs) {\r\n            if(!formData[input]) {\r\n                newError[input] = errorMessages[input];\r\n                isInvalid = true;\r\n            }\r\n        }\r\n\r\n        if(!/^[a-zA-Z0-9]+$/i.test(formData.username)) {\r\n            newError.username = errorMessages['no-numbers'];\r\n            isInvalid = true;\r\n        }\r\n\r\n        if(formData.password !== formData['retype-password']) {\r\n            newError['different-passwords'] = errorMessages['different-passwords'];\r\n            isInvalid = true;\r\n        }\r\n\r\n        \r\n\r\n        setFormError(newError);\r\n        return isInvalid;\r\n    }\r\n\r\n    function handleInputChange(e) {\r\n\r\n        setFilled(true);\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [e.currentTarget.id]: e.currentTarget.value\r\n        });\r\n\r\n        const newError = { ...formError, [e.currentTarget.id]:'',};\r\n        if(e.currentTarget.id === 'password' || e.currentTarget.id === 'retype-password') {\r\n            newError['different-passwords'] = '';\r\n        }\r\n\r\n        setFormError(newError)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className={ styles.formBody }>\r\n                <h1>Creare cont</h1>\r\n\r\n                {(globalErrorMessage ?\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        { globalErrorMessage }\r\n                    </div>\r\n                : null)}\r\n\r\n                {(isSuccessfull ?\r\n                <>\r\n                    <div className=\"alert alert-success\" role=\"alert\">\r\n                        Contul tau a fost creat cu succes!\r\n                    </div>\r\n                    <Switch>\r\n                        {/* <Route path='/login' component={UserProfile}/> */}\r\n                        <Redirect from='/register' to ='/'/>\r\n                    </Switch>\r\n                </>\r\n                : null)}\r\n\r\n                <form onSubmit={ handleSubmit }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\"></label>\r\n                        <input \r\n                        onChange={ handleInputChange } \r\n                        value={ formData.username } \r\n                        type=\"text\" \r\n                        className={'form-control' + (formError.username ? ' is-invalid' : '')} \r\n                        id=\"username\" \r\n                        placeholder=\"Enter username\"\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                            { formError.username }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\"></label>\r\n                        <input \r\n                        onChange={ handleInputChange } \r\n                        value={ formData.email } \r\n                        type=\"text\" \r\n                        className={'form-control' + (formError.email ? ' is-invalid' : '')} \r\n                        id=\"email\" \r\n                        placeholder=\"email@example.com\"\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                            { formError.email }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\"></label>\r\n                        <input \r\n                        onChange={ handleInputChange } \r\n                        value={ formData.password } \r\n                        type=\"password\" \r\n                        className={'form-control' + (formError.password ? ' is-invalid' : '')}  \r\n                        id=\"password\"\r\n                        placeholder=\"Password\"\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                            { formError.password }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"retype-password\"></label>\r\n                        <input \r\n                        onChange={ handleInputChange } \r\n                        value={ formData['retype-password'] } \r\n                        type=\"password\" \r\n                        className={'form-control' + (formError['retype-password'] || formError['different-passwords'] ? ' is-invalid' : '')} \r\n                        id=\"retype-password\"\r\n                        placeholder=\"Retype Password\"\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                            { formError['retype-password'] }\r\n                            { formError['retype-password'] ? <br/> : '' }\r\n                            { formError['different-passwords'] }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className={ styles.button } disabled={ !isFilled }>Register</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}